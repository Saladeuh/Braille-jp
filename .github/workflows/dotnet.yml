name: Release to GitHub
on:
  push:
    tags:
      - 'v*'  # Déclenchement sur les tags versionnés (ex: v1.0.0)
permissions:
  contents: write
jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      MGFXC_WINE_PATH: /home/runner/.winemonogame
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    - name: Get version from tag
      run: |
        TAGVERSION=$(git describe --tags --abbrev=0)
        echo "TAGVERSION=${TAGVERSION:1}" >> $GITHUB_ENV
        
        # Create SemVer compliant version for Velopack (ensure it has 3 parts)
        SEMVER_VERSION=${TAGVERSION:1}
        # Count the number of dots in the version
        DOT_COUNT=$(echo $SEMVER_VERSION | tr -cd '.' | wc -c)
        
        # If only has one dot (2 parts like 0.8), add .0 for the patch version
        if [ $DOT_COUNT -eq 1 ]; then
          SEMVER_VERSION="${SEMVER_VERSION}.0"
        # If no dots, add .0.0
        elif [ $DOT_COUNT -eq 0 ]; then
          SEMVER_VERSION="${SEMVER_VERSION}.0.0"
        fi
        
        echo "SEMVER_VERSION=${SEMVER_VERSION}" >> $GITHUB_ENV
    - name: Setup Wine
      run: |
        sudo apt update
        sudo apt install wine64 p7zip-full curl
        wget -qO- https://raw.githubusercontent.com/MonoGame/MonoGame/78636f8056fa981584e3a2a3e0f22e2efbc43ef8/Tools/MonoGame.Effect.Compiler/mgfxc_wine_setup.sh | sh
        
    # Création des artefacts standard
    - name: Build Windows
      run: |
        mkdir -p build/windows
        dotnet publish BrailleJP/BrailleJP.csproj -r win-x64 -c Release --self-contained --output build/windows
        # Vérification des fichiers générés pour le débogage
        echo "Contenu du répertoire Windows:"
        ls -la build/windows/
    - name: Build macOS
      run: |
        mkdir -p build/macos
        dotnet publish BrailleJP/BrailleJP.csproj -r osx-x64 -c Release --self-contained --output build/macos
        # Vérification des fichiers générés pour le débogage
        echo "Contenu du répertoire macOS:"
        ls -la build/macos/
    - name: Build Linux
      run: |
        mkdir -p build/linux
        dotnet publish BrailleJP/BrailleJP.csproj -r linux-x64 -c Release --self-contained --output build/linux
        # Vérification des fichiers générés pour le débogage
        echo "Contenu du répertoire Linux:"
        ls -la build/linux/
    
    # Création des archives pour les builds standard
    - name: Package Standard Builds
      run: |
        mkdir -p artifacts/standard
        cd build
        zip -r ../artifacts/standard/BrailleJP-Windows-${{ env.TAGVERSION }}.zip windows
        zip -r ../artifacts/standard/BrailleJP-macOS-${{ env.TAGVERSION }}.zip macos
        zip -r ../artifacts/standard/BrailleJP-Linux-${{ env.TAGVERSION }}.zip linux
    
    # Installation de Velopack
    - name: Install Velopack
      run: dotnet tool install -g vpk
    
    # Vérification des noms des exécutables générés
    - name: Check executable names
      run: |
        echo "Exécutables Windows:"
        find build/windows -type f -executable -o -name "*.exe" | sort
        echo "Exécutables macOS:"
        find build/macos -type f -executable | sort
        echo "Exécutables Linux:"
        find build/linux -type f -executable | sort
    
    # Téléchargement des versions précédentes pour delta updates
    - name: Download previous releases
      run: vpk download github --repoUrl https://github.com/${{ github.repository }}
        
    # Création des packages Velopack pour chaque plateforme
    - name: Create Velopack Release for Windows
      run: |
        mkdir -p artifacts/velopack/windows
        
        # Trouver le nom de l'exécutable principal (premier .exe trouvé)
        MAIN_EXE=$(find build/windows -name "*.exe" -type f -print -quit | xargs basename)
        if [ -z "$MAIN_EXE" ]; then
          echo "Aucun exécutable .exe trouvé dans build/windows"
          exit 1
        fi
        echo "Exécutable principal Windows trouvé : $MAIN_EXE"
        
        # Utiliser le nom de l'exécutable trouvé avec --mainExe
        vpk pack -u BrailleJP -v ${{ env.SEMVER_VERSION }} -p windows --basedir build/windows --mainExe "$MAIN_EXE" -o artifacts/velopack/windows
    
    - name: Create Velopack Release for macOS
      run: |
        mkdir -p artifacts/velopack/macos
        
        # Trouver le nom de l'exécutable principal pour macOS
        MAIN_EXE=$(find build/macos -type f -executable -not -path "*/\.*" -print -quit | xargs basename)
        if [ -z "$MAIN_EXE" ]; then
          echo "Aucun exécutable trouvé dans build/macos"
          exit 1
        fi
        echo "Exécutable principal macOS trouvé : $MAIN_EXE"
        
        # Utiliser le nom de l'exécutable trouvé avec --mainExe
        vpk pack -u BrailleJP -v ${{ env.SEMVER_VERSION }} -p macos --basedir build/macos --mainExe "$MAIN_EXE" -o artifacts/velopack/macos
    
    - name: Create Velopack Release for Linux
      run: |
        mkdir -p artifacts/velopack/linux
        
        # Trouver le nom de l'exécutable principal pour Linux
        MAIN_EXE=$(find build/linux -type f -executable -not -path "*/\.*" -print -quit | xargs basename)
        if [ -z "$MAIN_EXE" ]; then
          echo "Aucun exécutable trouvé dans build/linux"
          exit 1
        fi
        echo "Exécutable principal Linux trouvé : $MAIN_EXE"
        
        # Utiliser le nom de l'exécutable trouvé avec --mainExe
        vpk pack -u BrailleJP -v ${{ env.SEMVER_VERSION }} -p linux --basedir build/linux --mainExe "$MAIN_EXE" -o artifacts/velopack/linux
    
    # Création de la release GitHub
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/standard/BrailleJP-Windows-${{ env.TAGVERSION }}.zip
          artifacts/standard/BrailleJP-macOS-${{ env.TAGVERSION }}.zip
          artifacts/standard/BrailleJP-Linux-${{ env.TAGVERSION }}.zip
          artifacts/velopack/windows/*
          artifacts/velopack/macos/*
          artifacts/velopack/linux/*
        name: BrailleJP Release ${{ env.TAGVERSION }}
        tag_name: v${{ env.TAGVERSION }}
        draft: false
        prerelease: false
        generate_release_notes: true
 
 